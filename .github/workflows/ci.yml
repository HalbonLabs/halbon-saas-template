name: CI

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**/*.md'
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/PULL_REQUEST_TEMPLATE/**'
      - 'renovate.json'
      - '.vscode/**'
      - '.devcontainer/**'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**/*.md'
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/PULL_REQUEST_TEMPLATE/**'
      - 'renovate.json'
      - '.vscode/**'
      - '.devcontainer/**'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [18, 20, 22]
    runs-on: ${{ matrix.os }}
    env:
      CI: true
      NEXT_TELEMETRY_DISABLED: 1
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      - run: corepack enable
      - name: Prepare pnpm version
        shell: bash
        run: |
          VERSION=$(node -pe "require('./package.json').packageManager?.split('@')[1] || ''")
          if [ -z "$VERSION" ]; then VERSION=9.15.9; fi
          corepack prepare pnpm@"$VERSION" --activate
      - id: pnpm-cache
        shell: bash
        run: echo "store_path=$(pnpm store path)" >> $GITHUB_OUTPUT
      - uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.store_path }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - run: pnpm install --frozen-lockfile
      - run: pnpm lint

  typecheck:
    needs: [lint]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [18, 20, 22]
    runs-on: ${{ matrix.os }}
    env:
      CI: true
      NEXT_TELEMETRY_DISABLED: 1
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      - run: corepack enable
      - name: Prepare pnpm version
        shell: bash
        run: |
          VERSION=$(node -pe "require('./package.json').packageManager?.split('@')[1] || ''")
          if [ -z "$VERSION" ]; then VERSION=9.15.9; fi
          corepack prepare pnpm@"$VERSION" --activate
      - id: pnpm-cache
        shell: bash
        run: echo "store_path=$(pnpm store path)" >> $GITHUB_OUTPUT
      - uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.store_path }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - run: pnpm install --frozen-lockfile
      - run: pnpm typecheck

  build:
    needs: [typecheck]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [18, 20, 22]
    runs-on: ${{ matrix.os }}
    env:
      CI: true
      NEXT_TELEMETRY_DISABLED: 1
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      - run: corepack enable
      - name: Prepare pnpm version
        shell: bash
        run: |
          VERSION=$(node -pe "require('./package.json').packageManager?.split('@')[1] || ''")
          if [ -z "$VERSION" ]; then VERSION=9.15.9; fi
          corepack prepare pnpm@"$VERSION" --activate
      - id: pnpm-cache
        shell: bash
        run: echo "store_path=$(pnpm store path)" >> $GITHUB_OUTPUT
      - uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.store_path }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - uses: actions/cache@v4
        with:
          path: .next/cache
          key: ${{ runner.os }}-next-cache-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**/*.[tj]s', '**/*.[tj]sx', '**/*.mjs', '**/*.cjs', 'next.config.*') }}
          restore-keys: |
            ${{ runner.os }}-next-cache-
      - run: pnpm install --frozen-lockfile
      - run: pnpm build
